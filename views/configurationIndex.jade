extends layout
include includes/mixins

block nav
    li
        a(href="/transactions") Transactions
    li
        a(href="/account-info") Account info
    li
        a(href="/buy-and-sell") Buy and Sell
    li.active
        a(href="/configuration") Configuration
    li
        a(href="/kiosks") Kiosks
    li
        a(href="/logout") Logout

block content
    if (securityMessage != '')
        .alert.alert-danger #{ securityMessage }
    h1 Robocoin
    form(role="form")
        .form-group
            label(for="robocoinApiKey") API Key
            input(type="text" autocomplete="off").form-control#robocoinApiKey
        .form-group
            label(for="robocoinApiSecret") API Secret
            input(type="text" autocomplete="off").form-control#robocoinApiSecret
        .checkbox
            label
                input(type="checkbox" checked=robocoinTestMode==true)#robocoinTestMode
                | Test Mode
        button.btn.btn-default#robocoinSave Save

    h1 Kiosk
    +kioskSelector(kiosks)
    h2 Exchange
    p You are using #{ currentExchange } trading in #{ exchangeCurrency }
    input(type="hidden" value="#{ csrfToken }")#_csrf
    form(role="form")
        .form-group
            label(for="exchangeName") Use
            select.form-control#exchangeName
                option
                each exchange, name in exchangeDefs
                    option(value="#{ name }") #{ exchange.label }
        - each exchange, name in exchangeDefs
            div(id="#{ name }Controls").exchangeControls.hidden
                - each nonConfigurable, paramName in exchange.nonConfigurables
                    .form-group
                        label(for="#{ name }_#{ paramName }") #{ nonConfigurable.label }
                        input(type="text" disabled value="#{ nonConfigurable.value }" id="#{ name }_#{ paramName }").form-control
                - each configurable, paramName in exchange.configurables
                    .form-group
                        label(for="#{ name }_#{ paramName }") #{ configurable.label }
                        input(type="text" autocomplete="off" id="#{ name }_#{ paramName }").form-control
                .form-group
                    label(for="currency") Currency
                    select.form-control.currencyControl
                        - each currency in exchange.currencies
                            option(value="#{ currency }") #{ currency }
        button.btn.btn-default#exchangeSave Save

    h2 Currency Conversion
    p Configure this if the kiosk accepts and dispenses a currency other than what the exchange trades on.
    form(role="form")
        .form-group
            label(for="exchangeCurrency") Exchange Currency
            input(type="text" disabled value="#{ exchangeCurrency }").form-control#exchangeCurrency
        .form-group
            label(for="kioskCurrency") Kiosk Currency
            select.form-control#kioskCurrency
                option
                each supportedCurrency in supportedCurrencies
                    option(value="#{ supportedCurrency }" selected=kioskCurrency===supportedCurrency) #{ supportedCurrency }
        .form-group
            label(style="display:block;") Rate
            span 1&nbsp;
            span #{ exchangeCurrency }
            span &nbsp;=
            input(disabled value="#{ exchangeToKioskConversionRate }")#conversionRate
            span#kioskCurrencySpan &nbsp;#{ kioskCurrency }
        button(disabled).btn.btn-default#currencyConversionSave Save

    h1 Autoconnector
    form(role="form")
        - buttonText = autoconnectorEnabled == 1 ? 'Disable' : 'Enable'
        - nextState = autoconnectorEnabled == 1 ? 0 : 1
        button(data-next-state="#{ nextState }").btn.btn-default#autoconnectorEnable #{ buttonText }

    +loginModal('Save')

block footerJs
    script.
        $(document).ready(function () {

            function appendAlert(text, $element, type) {

                var $alert = $('<div></div>')
                    .addClass('alert alert-dismissable alert-' + type)
                    .append('<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>')
                    .append(text);
                $element.after($alert);
            };

            var $loginModal = $('#loginModal');
            $loginModal.modal({ show: false });

            $('#exchangeSave').on('click', function (event) {

                event.preventDefault();
                var $button = $(this);
                $loginModal.modal('show');
                var $reauthButton = $('#reauthButton');

                $reauthButton.off('click').on('click', function () {

                    var $controls = $('.exchangeControls.show input');
                    var data = {};
                    for (var i = 0; i < $controls.length; i++) {
                        data[$controls[i].id.replace('_', '.')] = $controls[i].value;
                    }
                    data.exchangeCurrency = $('.exchangeControls.show .currencyControl option:selected').val();
                    data._csrf = $('#_csrf').val();
                    data.username = $('#username').val();
                    data.password = $('#password').val();
                    var exchangeName = $('#exchangeName').val()
                    data.exchangeClass = (exchangeName.charAt(0).toUpperCase() + exchangeName.slice(1));
                    data.kioskId = $('#kioskSelector').val();

                    $.ajax({
                        url: '/configuration/save-exchange',
                        type: 'POST',
                        data: data,
                        success: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data, $reauthButton, 'success');
                        },
                        error: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data.responseText, $reauthButton, 'danger');
                        }
                    });
                });
            });

            $('#robocoinSave').off('click').on('click', function (event) {

                event.preventDefault();
                var $button = $(this);
                $loginModal.modal('show');
                var $reauthButton = $('#reauthButton');

                $reauthButton.off('click').on('click', function () {

                    $.ajax({
                        url: '/configuration/save-robocoin',
                        type: 'POST',
                        data: {
                            apiKey: $('#robocoinApiKey').val(),
                            apiSecret: $('#robocoinApiSecret').val(),
                            testMode: $('#robocoinTestMode').is(':checked'),
                            _csrf: $('#_csrf').val(),
                            username: $('#username').val(),
                            password: $('#password').val()
                        },
                        success: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data, $reauthButton, 'success');
                        },
                        error: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data.responseText, $reauthButton, 'danger');
                        }
                    });
                });
            });

            $('#exchangeName').on('change', function () {

                $('.exchangeControls').removeClass('show').addClass('hidden');
                $('#' + $(this).val() + 'Controls').removeClass('hidden').addClass('show');
            });

            $('#kioskCurrency').on('change', function () {

                var newValue = $(this).val();
                $('#kioskCurrencySpan').html('&nbsp;' + newValue);
                var isDisabled = (newValue === '');

                $('#conversionRate').attr('disabled', isDisabled);
                $('#currencyConversionSave').attr('disabled', isDisabled);
            });

            $('#currencyConversionSave').off('click').on('click', function (event) {

                event.preventDefault();
                $loginModal.modal('show');
                var $reauthButton = $('#reauthButton');
                $reauthButton.off('click').on('click', function () {

                    $.ajax({
                        url: '/configuration/save-currency-conversion',
                        type: 'POST',
                        data: {
                            _csrf: $('#_csrf').val(),
                            username: $('#username').val(),
                            password: $('#password').val(),
                            kioskCurrency: $('#kioskCurrency').val(),
                            conversionRate: $('#conversionRate').val(),
                            kioskId: $('#kioskSelector').val()
                        },
                        success: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data, $reauthButton, 'success');
                        },
                        error: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data.responseText, $reauthButton, 'danger');
                        }
                    });
                });
            });

            $('#autoconnectorEnable').on('click', function (event) {

                event.preventDefault();
                $loginModal.modal('show');
                var $autoconnectorButton = $(this);
                var $reauthButton = $('#reauthButton');
                var nextState = $autoconnectorButton.data('next-state');

                $reauthButton.off('click').on('click', function () {

                    $.ajax({
                        url: '/configuration/toggle-autoconnector',
                        type: 'POST',
                        data: {
                            _csrf: $('#_csrf').val(),
                            nextState: nextState
                        },
                        success: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data, $reauthButton, 'success');
                            $autoconnectorButton.data('next-state', (nextState == 1) ? 0 : 1);
                            $autoconnectorButton.html((nextState == 1 ? 'Disable' : 'Enable'));
                        },
                        error: function (data) {
                            $reauthButton.parent().find('.alert').remove();
                            appendAlert(data.responseText, $reauthButton, 'danger');
                            $autoconnectorButton.data('next-state', (nextState == 1) ? 0 : 1);
                            $autoconnectorButton.html((nextState == 1) ? 'Disable' : 'Enable');
                        }
                    });
                });

            });
        });